#!/usr/bin/env bash

#==============================================================================
#
#          FILE:  prompt
#         USAGE:  . prompt
#   DESCRIPTION:  Sets custom shell prompt
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#
#==============================================================================

#=====  FUNCTION  =============================================================
#          NAME:  setPromptCommand
#   DESCRIPTION:  Sets the PROMPT_COMMAND variable for bash shells
#    PARAMETERS:  None
#       RETURNS:  0 regardless of result
#==============================================================================
function setPromptCommand()
{
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    set +o noclobber;
    cname="F01-userProfile";
    function_name="${cname}#${FUNCNAME[0]}";
    return_code=0;

    color_off='\033[0m';
    color_red='\033[0;31m';
    color_green='\033[0;32m';
    color_yellow='\033[0;33m';
    color_blue='\033[0;34m';
    PS2="continue -> ";
    PS3="Enter selection: ";
    PS4='[Time: \D{%F %T} ][Thread: ${0}][Log: -][Level: TRACE] - [File: ${FUNCNAME[0]:-${SHELL}}] [Method: -] - ';
    git_status="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)";

    [[ -n "${PS1}" ]] && unset -v PS1;

    case "$(uname -s)" in
        [Cc][Yy][Gg][Ww][Ii][Nn]*)
            echo -ne "\033]0; $(printf "[%s:%s] : <%s>" "${LOGNAME}" "${HOSTNAME}" "$(basename "${PWD}")")\007";

            case "${git_status}" in
                "") PS1='$(printf "${color_green}[\u:\H] ${color_green}: ${color_green}<${color_yellow}\w${color_green}>\n\n$ ${color_off}")'; ;;
                *) PS1='$(printf "${color_green}[\u:\H] ${color_green}: ${color_green}<${color_yellow}\w ${color_blue}($(printf "%s" "${git_status}"))${color_green}>\n\n$ ${color_off}")'; ;;
            esac
            ;;
        *)
            case "${EUID}" in
                "${UID}")
                    echo -ne "\033]0; $(printf "[%s:%s] : <%s>" "${LOGNAME}" "${HOSTNAME}" "$(basename "${PWD}")")\007";

                    case "${git_status}" in
                        "") PS1='$(printf "${color_green}[\u:\H] ${color_green}: ${color_green}<${color_yellow}\w${color_green}>\n\n$ ${color_off}")'; ;;
                        *) PS1='$(printf "${color_green}[\u:\H] ${color_green}: ${color_green}<${color_yellow}\w ${color_blue}($(printf "%s" "${git_status}"))${color_green}>\n\n$ ${color_off}")'; ;;
                    esac
                    ;;
                *)
                    real_user="$(grep -w "${EUID}" /etc/passwd | cut -d ":" f 1)";

                    echo -ne "\033]0; $(printf "[%s:%s as %s] : <%s>" "${LOGNAME}" "${HOSTNAME}" "${real_user}" "$(basename "${PWD}")")\007";

                    case "${git_status}" in
                        "") PS1='$(printf "${color_red}NOTE: YOU ARE ${real_user}\n${color_green}[\u:\h as ${color_red}%s ${color_green}: ${color_green}<${color_yellow}\w${color_green}>\n\n$ ${color_off}")'; ;;
                        *) PS1='$(printf "${color_red}NOTE: YOU ARE ${real_user}\n${color_green}[\u:\h as ${color_red}%s ${color_green}: ${color_green}<${color_yellow}\w ${color_blue}($(printf "%s" "${git_status}")${color_green})\n\n$ ${color_off}")'; ;;
                    esac
                    ;;
            esac
    esac

    [[ -n "${function_name}" ]] && unset -v function_name;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return ${return_code};
}

declare -x PROMPT_COMMAND=setPromptCommand;
