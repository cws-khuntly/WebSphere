#!/usr/bin/env bash

#=====  FUNCTION  =============================================================
#          NAME:  showHostInfo
#   DESCRIPTION:  Re-loads existing dotfiles for use
#    PARAMETERS:  None
#       RETURNS:  0 if success, non-zero otherwise
#==============================================================================
function showHostInfo()
(
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    set +o noclobber;
    cname="F01-userProfile";
    function_name="${cname}#${FUNCNAME[0]}";
    return_code=0;

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        start_epoch="$(date +"%s")";

        writeLogEntryToFile "PERFORMANCE" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} START: $(date -d @"${start_epoch}" +"${TIMESTAMP_OPTS}")";
    fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} -> enter";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "Provided arguments: ${*}";
    fi

    ## system information
    host_system_name="$(hostname -f | tr '[:upper:]' '[:lower:]')";
    host_ip_address=( "$(ip addr show 2> /dev/null | grep "inet" | grep -E -v "inet6|127.0.0.1" | awk '{print $2}' | tr '\n' ' ')" );
    host_kernel_version="$(uname -r)";
    host_cpu_count=$(grep -c "model name" < /proc/cpuinfo);
    host_cpu_info="$(grep -E "model name" < /proc/cpuinfo | uniq | cut -d ":" -f 2 | sed -e 's/^ *//g;s/ *$//g' | tr -s " ")";
    host_memory_size="$(( $(grep -E MemTotal /proc/meminfo | awk '{print $2}') / 1024 ^ 2 ))";

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "host_system_name -> ${host_system_name}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "host_ip_address -> ${host_ip_address[*]}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "host_kernel_version -> ${host_kernel_version}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "host_cpu_count -> ${host_cpu_count}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "host_cpu_info -> ${host_cpu_info}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "host_memory_size -> ${host_memory_size}";
    fi

    ## user information
    user_disk_usage=$(du -ms "${HOME}"/ 2> /dev/null | awk '{print $1}');
    system_process_count=$(ps -ef | tail -n +1 | wc -l | awk '{print $1}');
    user_process_count=$(ps -ef | tail -n +1 | grep -v grep | grep -c "${LOGNAME}");

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "user_disk_usage -> ${user_disk_usage}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "system_process_count -> ${system_process_count}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "user_process_count -> ${user_process_count}";
    fi

    clear;

    printf "\n" >&2;
    printf "%s\n" "+-------------------------------------------------------------------+" >&2;
    printf "%40s\n" "Welcome to ${host_system_name}" >&2;
    printf "%s\n" "+-------------------------------------------------------------------+" >&2;

    if [[ -r /etc/motd ]] && [[ -s /etc/motd ]]
    then
        printf "\n" >&2;
        cat /etc/motd <&2;
        printf "\n" >&2;
    fi

    printf "%s\n" "+---------------------- System Information -------------------------+" >&2;
    printf "%-16s : %-10s\n" "+ IP Address" "${host_ip_address[@]}" >&2;
    printf "%-16s : %-10s\n" "+ Kernel version" "${host_kernel_version}" >&2;
    printf "%-16s : %-10s\n" "+ CPU" "${host_cpu_count} / ${host_cpu_info}" >&2;
    printf "%-16s : %-10s\n" "+ Memory" "${host_memory_size} MB" >&2;
    printf "%s\n" "+-------------------------------------------------------------------+" >&2;
    printf "\n" >&2;
    printf "%s\n" "+----------------------- User Information --------------------------+" >&2;
    printf "%-16s : %-10s\n" "+ Username" "${LOGNAME}" >&2;
    printf "%-16s : %-10s %sMB %s\n" "+ Disk Usage" "You're currently using" "${user_disk_usage}" "in ${HOME}" >&2;
    printf "%-16s : %s of which %s are yours\n" "+ Processes" "${system_process_count}" "${user_process_count}" >&2;
    printf "+-------------------------------------------------------------------+" >&2;
    printf "\n" >&2;

    [[ -n "${host_system_name}" ]] && unset -v host_system_name;
    [[ -n "${host_ip_address[*]}" ]] && unset -v host_ip_address;
    [[ -n "${host_kernel_version}" ]] && unset -v host_kernel_version;
    [[ -n "${host_cpu_count}" ]] && unset -v host_cpu_count;
    [[ -n "${host_cpu_info}" ]] && unset -v host_cpu_info;
    [[ -n "${host_memory_size}" ]] && unset -v host_memory_size;

    if [[ -n "${error_count}" ]] && (( error_count != 0 )); then return_code="${error_count}"; fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "return_code -> ${return_code}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} -> exit";
    fi

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        end_epoch="$(date +"%s")"
        runtime=$(( start_epoch - end_epoch ));

        writeLogEntryToFile "PERFORMANCE" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS";
        writeLogEntryToFile "PERFORMANCE" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} END: $(date -d "@${end_epoch}" +"${TIMESTAMP_OPTS}")";
    fi

    [[ -n "${function_name}" ]] && unset -v function_name;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return "${return_code}";
)

#=====  FUNCTION  =============================================================
#          NAME:  setPromptCommand
#   DESCRIPTION:  Sets the PROMPT_COMMAND variable for bash shells
#    PARAMETERS:  None
#       RETURNS:  0 regardless of result
#==============================================================================
function setPromptCommand()
{
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    set +o noclobber;
    cname="F01-userProfile";
    function_name="${cname}#${FUNCNAME[0]}";
    return_code=0;

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        start_epoch="$(date +"%s")";

        writeLogEntryToFile "PERFORMANCE" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} START: $(date -d @"${start_epoch}" +"${TIMESTAMP_OPTS}")";
    fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} -> enter";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "Provided arguments: ${*}";
    fi

    color_off='\033[0m';
    color_black='\033[0;30m';
    color_red='\033[0;31m';
    color_green='\033[0;32m';
    color_yellow='\033[0;33m';
    color_blue='\033[0;34m';
    real_user="$(who am i | awk '{print $1}')";
    PS2="continue -> ";
    PS3="Enter selection: ";
    PS4='[Time: \D{%F %T} ][Thread: ${0}][Log: -][Level: TRACE] - [File: ${FUNCNAME[0]:-${SHELL}}] [Method: -] - '; declare -x PS4;
    git_status="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)";

    [[ -n "${PS1}" ]] && unset -v PS1;

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "git_status -> ${git_status}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "Setting PS1...";
    fi

    case "${real_user}" in
        "${LOGNAME}")
            echo -ne "\033]0; $(printf "[%s:%s] : <%s>" "${LOGNAME}" "${HOSTNAME}" "$(basename "${PWD}")")\007";

            case "${git_status}" in
                "") PS1='$(printf "${color_green}[\u:\H] ${color_black}: ${color_green}<${color_yellow}\w${color_green}>\n\n$ ${color_off}")'; ;;
                *) PS1='$(printf "${color_green}[\u:\H] ${color_black}: ${color_green}<${color_yellow}\w ${color_blue}($(printf "%s" "${git_status}"))${color_green}>\n\n$ ${color_off}")'; ;;
            esac
            ;;
        *)
            echo -ne "\033]0; $(printf "[%s:%s as %s] : <%s>" "${LOGNAME}" "${HOSTNAME}" "${real_user}" "$(basename "${PWD}")")\007";

            case "${git_status}" in
                "") PS1='$(printf "${color_red}NOTE: YOU ARE ${real_user}\n${color_green}[\u:\h as ${color_red}%s ${color_black}: ${color_green}<${color_yellow}\w${color_green}>\n\n$ ${color_off}")'; ;;
                *) PS1='$(printf "${color_red}NOTE: YOU ARE ${real_user}\n${color_green}[\u:\h as ${color_red}%s ${color_black}: ${color_green}<${color_yellow}\w ${color_blue}($(printf "%s" "${git_status}")${color_green})\n\n$ ${color_off}")'; ;;
            esac
            ;;
    esac

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "PS1 -> ${PS1}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} -> exit";
    fi

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        end_epoch="$(date +"%s")"
        runtime=$(( start_epoch - end_epoch ));

        writeLogEntryToFile "PERFORMANCE" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS";
        writeLogEntryToFile "PERFORMANCE" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} END: $(date -d "@${end_epoch}" +"${TIMESTAMP_OPTS}")";
    fi

    [[ -n "${function_name}" ]] && unset -v function_name;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return ${return_code};
}

#=====  FUNCTION  =============================================================
#          NAME:  logoutUser
#   DESCRIPTION:  Executes necessary commands during user logout
#    PARAMETERS:  None
#       RETURNS:  0 regardless of result
#==============================================================================
function logoutUser()
(
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    set +o noclobber;
    cname="F01-userProfile";
    function_name="${cname}#${FUNCNAME[0]}";
    return_code=0;
    error_count=0;

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        start_epoch="$(date +"%s")";

        writeLogEntryToFile "PERFORMANCE" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} START: $(date -d @"${start_epoch}" +"${TIMESTAMP_OPTS}")";
    fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} -> enter";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "Provided arguments: ${*}";
    fi

    ## turn off ssh-agent and keychain
    [[ -n "$(pidof ssh-agent)" ]] && pkill ssh-agent;
    [[ -f "${HOME}/.ssh/ssh-agent.env" ]] && rm -f "${HOME}/.ssh/ssh-agent.env";

    ## clear terminal scrollback
    printf "\033c";

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "return_code -> ${return_code}";
        writeLogEntryToFile "DEBUG" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} -> exit";
    fi

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then
        end_epoch="$(date +"%s")"
        runtime=$(( start_epoch - end_epoch ));

        writeLogEntryToFile "PERFORMANCE" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS";
        writeLogEntryToFile "PERFORMANCE" "${$}" "${cname}" "${LINENO}" "${function_name}" "${function_name} END: $(date -d "@${end_epoch}" +"${TIMESTAMP_OPTS}")";
    fi

    [[ -n "${error_count}" ]] && unset -v error_count;
    [[ -n "${function_name}" ]] && unset -v function_name;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    exit;
)
