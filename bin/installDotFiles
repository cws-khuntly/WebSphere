#!/usr/bin/env bash
#==============================================================================
#
#          FILE:  installDotFiles
#         USAGE:  See usage section
#   DESCRIPTION:
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  CaspersBox Web Services
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#==============================================================================

trap 'set +v; set +x' INT TERM EXIT;

typeset -x PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin";

[ -r "${HOME}/.dotfiles/etc/logging.properties" -a -s "${HOME}/.dotfiles/etc/logging.properties" ] && . "${HOME}/.dotfiles/etc/logging.properties";
[ -r "${HOME}/.dotfiles/lib/logger.sh" -a ! -z "${LOGGING_LOADED}" -a "${LOGGING_LOADED}" == "${_TRUE}" ] && . "${HOME}/.dotfiles/lib/logger.sh";

[ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
[ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

## source necessary functions
[ -r "${HOME}/.dotfiles/functions.d/F06-network" ] && . "${HOME}/.dotfiles/functions.d/F06-network";

## Application constants
typeset CNAME="$(/usr/bin/env basename "${0}")";
typeset SCRIPT_ABSOLUTE_PATH="$(builtin cd "${0%/*}" 2>/dev/null; echo "${PWD}/${0##*/}")";
typeset SCRIPT_ROOT="$(/usr/bin/env dirname "${SCRIPT_ABSOLUTE_PATH}")";
typeset METHOD_NAME="${CNAME}#startup";
typeset -i ERROR_COUNT=0;
typeset CONFIG="${HOME}/.dotfiles/etc/install.conf"
typeset CURR_IFS="${IFS}";
typeset MODIFIED_IFS=$'\n';

[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "CNAME -> ${CNAME}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "SCRIPT_ABSOLUTE_PATH -> ${SCRIPT_ABSOLUTE_PATH}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "SCRIPT_ROOT -> ${SCRIPT_ROOT}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "METHOD_NAME -> ${METHOD_NAME}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ERROR_COUNT -> ${ERROR_COUNT}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "CONFIG -> ${CONFIG}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "IFS -> ${IFS}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "MODIFIED_IFS -> ${MODIFIED_IFS}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${CNAME} starting up.. Process ID ${$}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> enter";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Provided arguments: ${*}";

#=====  FUNCTION  =============================================================
#          NAME:  deployFiles
#   DESCRIPTION:  ssh's to a target host and removes the existing dotfiles
#                 directory and copies the new one
#    PARAMETERS:  None
#       RETURNS:  0 if success, non-zero otherwise
#==============================================================================
function deployFiles
{
    set +o noclobber;
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;
    [ -z "${TARGET_USER}" ] && typeset TARGET_USER="${LOGNAME}";

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} START: $(date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(date +"%s");

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Provided arguments: ${*}";

    if [ ${#} -eq 0 ]
    then
        typeset -i RETURN_CODE=3;

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "No arguments were provided.";

        usage;

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/env rm -f ${HOME}/dotfiles.tar;
        [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";

        [ ! -z "${CNAME}" ] && unset -v CNAME;
        [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
        [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
        [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
        [ ! -z "${CONFIG}" ] && unset -v CONFIG;
        [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
        [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
        [ ! -z "${ACTION}" ] && unset -v ACTION;
        [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
        [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
        [ ! -z "${SFTP_BATCH_FILE}" ] && unset -v SFTP_BATCH_FILE;
        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        return ${RETURN_CODE};
    fi

    case "${FORCE_PUSH}" in
        "${_TRUE}")
            writeLogEntry "INFO" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Skipping host availability check due to FORCE_PUSH being ${_TRUE}";
            writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Skipping host availability check due to FORCE_PUSH being ${_TRUE}";
            ;;
        *)
            [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
            [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

            validateHostAvailability ${TARGET_HOST};
            typeset -i RET_CODE=${?};

            typeset METHOD_NAME="${0}#${FUNCNAME[0]}";

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "RET_CODE -> ${RET_CODE}";

            if [ -z "${RET_CODE}" -o ${RET_CODE} -ne 0 ]
            then
                typeset RETURN_CODE=1;

                writeLogEntry "ERROR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "${TARGET_HOST} does not appear to be available. Unable to install files.";
                writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "${TARGET_HOST} does not appear to be available. Unable to install files.";

                [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
                [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
                [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
                [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "${METHOD_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

                [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

                [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";
                [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/rm -f "${HOME}/dotfiles.tar";

                [ ! -z "${CNAME}" ] && unset -v CNAME;[ ! -z "${CNAME}" ] && unset -v CNAME;
                [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
                [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
                [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
                [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
                [ ! -z "${CONFIG}" ] && unset -v CONFIG;
                [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
                [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
                [ ! -z "${ACTION}" ] && unset -v ACTION;
                [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
                [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
                [ ! -z "${KEYFILE}" ] && unset -v KEYFILE;
                [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
                [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
                [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

                [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
                [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

                return ${RETURN_CODE};
            fi
            ;;
    esac

    ## we are ONLY pushing the tarfile. no ssh keys, no installations, no nothing - just create and send the tar
    ## create a copy of the existing dotfiles directory from THIS host and send it to the target host
    builtin cd ${HOME}/.dotfiles; /usr/bin/env tar --exclude-vcs --exclude=README.md --exclude=LICENSE.md -cf ~/dotfiles.tar *; ## create the archive

    ## make a temp file to store sftp commands in
    typeset SFTP_BATCH_FILE="$(/usr/bin/env mktemp)";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "SFTP_BATCH_FILE -> ${SFTP_BATCH_FILE}";

    echo "put ${HOME}/dotfiles.tar" >| "${SFTP_BATCH_FILE}";

    /usr/bin/env ssh -ql ${TARGET_USER} ${TARGET_HOST} "typeset -x PATH=${PATH}:/bin:sbin:/usr/bin:/usr/sbin; [ -f /home/${TARGET_USER}/dotfiles.tar ] && " \
        "/usr/bin/env rm -f /home/${TARGET_USER}/dotfiles.tar;"
    /usr/bin/env sftp -b "${SFTP_BATCH_FILE}" ${TARGET_USER}@${TARGET_HOST};

    typeset -i RET_CODE=${?};

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "RET_CODE -> ${RET_CODE}";

    if [ -z "${RET_CODE}" -o ${RET_CODE} -ne 0 ]
    then
        typeset -i RETURN_CODE=1;

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "RETURN_CODE -> ${RETURN_CODE}";

        writeLogEntry "ERROR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Failed to copy dotfiles to remote host ${TARGET_HOST}.";
        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Failed to copy dotfiles to remote host ${TARGET_HOST}.";

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/env rm -f ${HOME}/dotfiles.tar;
        [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";

        [ ! -z "${CNAME}" ] && unset -v CNAME;
        [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
        [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
        [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
        [ ! -z "${CONFIG}" ] && unset -v CONFIG;
        [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
        [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
        [ ! -z "${ACTION}" ] && unset -v ACTION;
        [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
        [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
        [ ! -z "${SFTP_BATCH_FILE}" ] && unset -v SFTP_BATCH_FILE;
        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        return ${RETURN_CODE};
    fi

    typeset -i RETURN_CODE=0;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

    [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/env rm -f ${HOME}/dotfiles.tar;
    [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";

    [ ! -z "${CNAME}" ] && unset -v CNAME;
    [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
    [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
    [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
    [ ! -z "${CONFIG}" ] && unset -v CONFIG;
    [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
    [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
    [ ! -z "${ACTION}" ] && unset -v ACTION;
    [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
    [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
    [ ! -z "${SFTP_BATCH_FILE}" ] && unset -v SFTP_BATCH_FILE;
    [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
    [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

    return ${RETURN_CODE};
}

#=====  FUNCTION  =============================================================
#          NAME:  deployAndInstall
#   DESCRIPTION:  ssh's to a target host and removes the existing dotfiles
#                 directory and copies the new one
#    PARAMETERS:  None
#       RETURNS:  0 if success, non-zero otherwise
#==============================================================================
function deployAndInstall
{
    set +o noclobber;
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;
    [ -z "${TARGET_USER}" ] && typeset TARGET_USER="${LOGNAME}";

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} START: $(date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(date +"%s");

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Provided arguments: ${*}";

    if [ ${#} -eq 0 ]
    then
        typeset -i RETURN_CODE=3;

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "No arguments were provided.";

        usage;

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";
        [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/rm -f "${HOME}/dotfiles.tar";

        [ ! -z "${CNAME}" ] && unset -v CNAME;[ ! -z "${CNAME}" ] && unset -v CNAME;
        [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
        [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
        [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
        [ ! -z "${CONFIG}" ] && unset -v CONFIG;
        [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
        [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
        [ ! -z "${ACTION}" ] && unset -v ACTION;
        [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
        [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
        [ ! -z "${KEYFILE}" ] && unset -v KEYFILE;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        return ${RETURN_CODE};
    fi

    case "${FORCE_PUSH}" in
        "${_TRUE}")
            writeLogEntry "INFO" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Skipping host availability check due to FORCE_PUSH being ${_TRUE}";
            writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Skipping host availability check due to FORCE_PUSH being ${_TRUE}";
            ;;
        *)
            [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
            [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

            validateHostAvailability ${TARGET_HOST};
            typeset -i RET_CODE=${?};

            typeset METHOD_NAME="${0}#${FUNCNAME[0]}";

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "RET_CODE -> ${RET_CODE}";

            if [ -z "${RET_CODE}" -o ${RET_CODE} -ne 0 ]
            then
                typeset RETURN_CODE=1;

                writeLogEntry "ERROR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "${TARGET_HOST} does not appear to be available. Unable to install files.";
                writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "${TARGET_HOST} does not appear to be available. Unable to install files.";

                [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
                [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
                [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
                [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "${METHOD_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

                [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

                [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";
                [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/rm -f "${HOME}/dotfiles.tar";

                [ ! -z "${CNAME}" ] && unset -v CNAME;[ ! -z "${CNAME}" ] && unset -v CNAME;
                [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
                [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
                [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
                [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
                [ ! -z "${CONFIG}" ] && unset -v CONFIG;
                [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
                [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
                [ ! -z "${ACTION}" ] && unset -v ACTION;
                [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
                [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
                [ ! -z "${KEYFILE}" ] && unset -v KEYFILE;
                [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
                [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
                [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

                [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
                [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

                return ${RETURN_CODE};
            fi
            ;;
    esac

    ## copy ssh keys
    for KEYFILE in id_rsa id_dsa id_ecdsa ## handle all, not just rsa
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Copying public key ${KEYFILE}";

        ## check if the file actually exists, if its not there just skip it
        [ ! -f /home/${TARGET_USER}/.ssh/${KEYFILE}.pub ] && continue;

        /usr/bin/env ssh-copy-id -i /home/${TARGET_USER}/.ssh/${KEYFILE}.pub -f ${TARGET_HOST} > /home/${TARGET_USER}/.log/ssh-copy-id-${KEYFILE} 2>&1;
        typeset -i RET_CODE=${?};

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "RET_CODE -> ${RET_CODE}";

        if [ -z "${RET_CODE}" -o ${RET_CODE} -ne 0 ]
        then
            writeLogEntry "ERROR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Failed to copy SSH identity ${KEYFILE} to host ${TARGET_HOST}";
            writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Failed to copy SSH identity ${KEYFILE} to host ${TARGET_HOST}";

            typeset -i RET_CODE=0;

            continue;
        fi

        [ ! -z "${KEYFILE}" ] && unset -v KEYFILE;
    done

    ## create a copy of the existing dotfiles directory from THIS host and send it to the target host
    builtin cd ${HOME}/.dotfiles; /usr/bin/env tar --exclude-vcs --exclude=README.md --exclude=LICENSE.md -cf ~/dotfiles.tar *; ## create the archive

    ## make a temp file to store sftp commands in
    typeset SFTP_BATCH_FILE="$(/usr/bin/env mktemp)";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "SFTP_BATCH_FILE -> ${SFTP_BATCH_FILE}";

    echo "put ${HOME}/dotfiles.tar" >| "${SFTP_BATCH_FILE}";

    /usr/bin/env ssh -ql ${TARGET_USER} ${TARGET_HOST} "typeset -x PATH=${PATH}:/bin:sbin:/usr/bin:/usr/sbin; [ -f /home/${TARGET_USER}/dotfiles.tar ] && " \
        "/usr/bin/env rm -f /home/${TARGET_USER}/dotfiles.tar;"
    /usr/bin/env sftp -b "${SFTP_BATCH_FILE}" ${TARGET_USER}@${TARGET_HOST};

    typeset -i RET_CODE=${?};

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "RET_CODE -> ${RET_CODE}";

    if [ -z "${RET_CODE}" -o ${RET_CODE} -ne 0 ]
    then
        typeset -i RETURN_CODE=1;

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "RETURN_CODE -> ${RETURN_CODE}";

        writeLogEntry "ERROR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Failed to copy dotfiles to remote host ${TARGET_HOST}.";
        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Failed to copy dotfiles to remote host ${TARGET_HOST}.";

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";
        [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/rm -f "${HOME}/dotfiles.tar";

        [ ! -z "${CNAME}" ] && unset -v CNAME;[ ! -z "${CNAME}" ] && unset -v CNAME;
        [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
        [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
        [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
        [ ! -z "${CONFIG}" ] && unset -v CONFIG;
        [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
        [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
        [ ! -z "${ACTION}" ] && unset -v ACTION;
        [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
        [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
        [ ! -z "${KEYFILE}" ] && unset -v KEYFILE;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        return ${RETURN_CODE};
    fi

    ## ok, files should be out there. lets go
    /usr/bin/env ssh -ql ${TARGET_USER} ${TARGET_HOST} "typeset -x PATH=${PATH}:/bin:sbin:/usr/bin:/usr/sbin; [ -d /home/${TARGET_USER}/.dotfiles ] && \
        /usr/bin/rm -rf /home/${TARGET_USER}/.dotfiles; /usr/bin/env mkdir /home/${TARGET_USER}/.dotfiles >/dev/null 2>&1; \
        builtin cd /home/${TARGET_USER}/.dotfiles; /usr/bin/env tar xf /home/${TARGET_USER}/dotfiles.tar; \
        /home/${TARGET_USER}/.dotfiles/bin/installDotFiles -a installFiles;";

    typeset -i RET_CODE=${?};

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "RET_CODE -> ${RET_CODE}";

    if [ -z "${RET_CODE}" -o ${RET_CODE} -ne 0 ]
    then
        typeset RETURN_CODE=1;

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "RETURN_CODE -> ${RETURN_CODE}";

        writeLogEntry "ERROR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Failed to clean/create dotfiles on host ${TARGET_HOST}";
        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${METHOD_NAME}" "Failed to clean/create dotfiles ${TARGET_HOST}";

        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

        [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";
        [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/rm -f "${HOME}/dotfiles.tar";

        [ ! -z "${CNAME}" ] && unset -v CNAME;[ ! -z "${CNAME}" ] && unset -v CNAME;
        [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
        [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
        [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
        [ ! -z "${CONFIG}" ] && unset -v CONFIG;
        [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
        [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
        [ ! -z "${ACTION}" ] && unset -v ACTION;
        [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
        [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
        [ ! -z "${KEYFILE}" ] && unset -v KEYFILE;
        [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        return ${RETURN_CODE};
    fi

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

    [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";
    [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/rm -f "${HOME}/dotfiles.tar";

    [ ! -z "${CNAME}" ] && unset -v CNAME;[ ! -z "${CNAME}" ] && unset -v CNAME;
    [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
    [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
    [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
    [ ! -z "${CONFIG}" ] && unset -v CONFIG;
    [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
    [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
    [ ! -z "${KEYFILE}" ] && unset -v KEYFILE;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
    [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
    [ ! -z "${ACTION}" ] && unset -v ACTION;
    [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
    [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
    [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

    return ${RETURN_CODE};
}

#=====  FUNCTION  =============================================================
#          NAME:  installFiles
#   DESCRIPTION:  Re-loads existing dotfiles for use
#    PARAMETERS:  None
#       RETURNS:  0 if success, non-zero otherwise
#==============================================================================
function installFiles
{
    set +o noclobber;
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;
    typeset -i ERROR_COUNT=0;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} START: $(date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(date +"%s");

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Provided arguments: ${*}";

    ## we assume at this point that the package has already been extracted into the right place (because it shouldve been based on the code)
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Setting permissions.";

    ## change some permissions
    /usr/bin/env find ${HOME}/.dotfiles -type d -exec /usr/bin/env chmod 755 {} \; ;
    /usr/bin/env find ${HOME}/.dotfiles -type f -exec /usr/bin/env chmod 644 {} \; ;
    /usr/bin/env chmod 755 ${HOME}/.dotfiles/bin/*; ## 755 on all files in bin
    [ ! -d ${HOME}/.ssh ] && /usr/bin/env mkdir -p ${HOME}/.ssh; /usr/bin/env chmod 700 ${HOME}/.ssh; ## ssh wants 700
    [ ! -d ${HOME}/.gnupg ] && /usr/bin/env mkdir -p ${HOME}/.gnupg; /usr/bin/env chmod 700 ${HOME}/.gnupg ## gpg wants 700
    /usr/bin/env chmod 600 ${HOME}/.dotfiles/m2/settings.xml ${HOME}/.dotfiles/etc/ldaprc ${HOME}/.dotfiles/etc/curlrc ${HOME}/.dotfiles/etc/netrc ${HOME}/.dotfiles/etc/wgetrc; ## 600 on all security related files
    /usr/bin/env chmod 600 ${HOME}/.dotfiles/etc/SecurityService/config/ServiceConfig.xml ${HOME}/.dotfiles/etc/eSolutionsCore/config/ServiceConfig.xml; ## 600 on all security related files

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Generating and creating files.";

    ## change the IFS
    typeset -x IFS="${MODIFIED_IFS}";

    ## clean up home directory first
    for ENTRY in $(<${CONFIG})
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "ENTRY -> ${ENTRY}";

        [[ "${ENTRY}" =~ ^\# ]] && continue;

        typeset ENTRY_COMMAND="$(/usr/bin/env cut -d "|" -f 1 <<< "${ENTRY}")";
        typeset ENTRY_SOURCE="$(/usr/bin/env cut -d "|" -f 2 <<< "${ENTRY}")";
        typeset ENTRY_TARGET="$(/usr/bin/env cut -d "|" -f 3 <<< "${ENTRY}")";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "ENTRY_COMMAND -> ${ENTRY_COMMAND}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "ENTRY_SOURCE -> ${ENTRY_SOURCE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "ENTRY_TARGET -> ${ENTRY_TARGET}";

        case "${ENTRY_COMMAND}" in
            "mkdir")
                [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Creating directory ${ENTRY_SOURCE}";

                /usr/bin/env mkdir -p $(eval echo "${ENTRY_SOURCE}");
                typeset RET_CODE=${?};

                if [ -z "${RET_CODE}" -o ${RET_CODE} -ne 0 ]
                then
                    writeLogEntry "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "Failed to create directory ${ENTRY_SOURCE} on host $(/usr/bin/env hostname)";
                    writeLogEntry "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "Failed to create directory ${ENTRY_SOURCE} on host $(/usr/bin/env hostname)";

                    (( ERROR_COUNT += 1 ));

                    continue;
                fi

                [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Directory ${ENTRY_SOURCE} created";
                ;;
            "ln")

                [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Removing symbolic link ${ENTRY_TARGET}";

                [ -L $(eval echo "${ENTRY_TARGET}") ] && /usr/bin/env unlink $(eval echo "${ENTRY_TARGET}");
                [ -f $(eval echo "${ENTRY_TARGET}") ] && /usr/bin/env rm -f $(eval echo "${ENTRY_TARGET}");

                [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Creating symbolic link ${ENTRY_SOURCE} -> ${ENTRY_TARGET}";

                /usr/bin/env ln -s $(eval echo "${ENTRY_SOURCE}") $(eval echo "${ENTRY_TARGET}");
                typeset RET_CODE=${?};

                if [ -z "${RET_CODE}" -o ${RET_CODE} -ne 0 ]
                then
                    writeLogEntry "ERROR" "${METHOD_NAME}" "${0}" "${LINENO}" "Failed to link ${ENTRY_SOURCE} to ${ENTRY_TARGET} on host $(/usr/bin/env hostname)";
                    writeLogEntry "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "Failed to link ${ENTRY_SOURCE} to ${ENTRY_TARGET} on host $(/usr/bin/env hostname)";

                    (( ERROR_COUNT += 1 ));

                    continue;
                fi

                [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "Symbolic link ${ENTRY_SOURCE} -> ${ENTRY_TARGET} created.";
                ;;
            *)
                writeLogEntry "INFO" "${METHOD_NAME}" "${0}" "${LINENO}" "Skipping entry ${ENTRY_COMMAND}.";

                continue;
                ;;
        esac

        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${ENTRY_COMMAND}" ] && unset -v ENTRY_COMMAND;
        [ ! -z "${ENTRY_SOURCE}" ] && unset -v ENTRY_SOURCE;
        [ ! -z "${ENTRY_TARGET}" ] && unset -v ENTRY_TARGET;
        [ ! -z "${ENTRY}" ] && unset -v ENTRY;
    done

    ## restore the original ifs
    typeset -x IFS="${IFS}";

    ## remove tarfile
    [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/env rm -f "${HOME}/dotfiles.tar";

    typeset -i RETURN_CODE=${ERROR_COUNT};

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

    [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";
    [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/rm -f "${HOME}/dotfiles.tar";

    [ ! -z "${CNAME}" ] && unset -v CNAME;
    [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
    [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
    [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
    [ ! -z "${CONFIG}" ] && unset -v CONFIG;
    [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
    [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
    [ ! -z "${ENTRY_COMMAND}" ] && unset -v ENTRY_COMMAND;
    [ ! -z "${ENTRY_SOURCE}" ] && unset -v ENTRY_SOURCE;
    [ ! -z "${ENTRY_TARGET}" ] && unset -v ENTRY_TARGET;
    [ ! -z "${ENTRY}" ] && unset -v ENTRY;
    [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
    [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
    [ ! -z "${ACTION}" ] && unset -v ACTION;
    [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
    [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
    [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

    return ${RETURN_CODE};
}

function usage
{
    typeset METHOD_NAME="${0}#${FUNCNAME[0]}";
    typeset -i RETURN_CODE=3;

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}";

    writeLogEntry "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} - Install dotfiles to a remote host";
    writeLogEntry "STDERR" "${METHOD_NAME}" "${0}" "${LINENO}" "Usage: ${METHOD_NAME} [ -h host ] [ -u user ] [ -a action ] (-f)
            -> -h <host> - The hostname to connect to
            -> -u <user> - The username to connect as
            -> -a <action> - The action to perform
                -> One of the following:
                    -> installFiles - To install the files on the local system
                    -> deployFiles - To deploy the files to the target host but NOT install
                    -> deployAndInstall - Deploy and install the dotfiles on the target host
            -> (-f) - Force deployment (skip host verification)";

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} -> exit";

    [ -f "${SFTP_BATCH_FILE}" ] && /usr/bin/rm -f "${SFTP_BATCH_FILE}";
    [ -f "${HOME}/dotfiles.tar" ] && /usr/bin/rm -f "${HOME}/dotfiles.tar";

    [ ! -z "${CNAME}" ] && unset -v CNAME;
    [ ! -z "${SCRIPT_ABSOLUTE_PATH}" ] && unset -v SCRIPT_ABSOLUTE_PATH;
    [ ! -z "${SCRIPT_ROOT}" ] && unset -v SCRIPT_ROOT;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
    [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
    [ ! -z "${CONFIG}" ] && unset -v CONFIG;
    [ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
    [ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
    [ ! -z "${ACTION}" ] && unset -v ACTION;
    [ ! -z "${TARGET_USER}" ] && unset -v TARGET_USER;
    [ ! -z "${TARGET_HOST}" ] && unset -v TARGET_HOST;
    [ ! -z "${ENTRY_COMMAND}" ] && unset -v ENTRY_COMMAND;
    [ ! -z "${ENTRY_SOURCE}" ] && unset -v ENTRY_SOURCE;
    [ ! -z "${ENTRY_TARGET}" ] && unset -v ENTRY_TARGET;
    [ ! -z "${ENTRY}" ] && unset -v ENTRY;
    [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
    [ ! -z "${METHOD_NAME}" ] && unset -v METHOD_NAME;
    [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
    [ ! -z "${FORCE_PUSH}" ] && unset -v FORCE_PUSH;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

    exit ${RETURN_CODE};
}

[ ${#} -eq 0 ] && usage;

while getopts h:u:a:f OPTIONS
do
    case "${OPTIONS}" in
        h)
            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "OPTARG -> ${OPTARG}";
            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Setting TARGET_HOST..";

            typeset TARGET_HOST=${OPTARG};

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "TARGET_HOST -> ${TARGET_HOST}";
            ;;
        u)
            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "OPTARG -> ${OPTARG}";
            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Setting TARGET_USER..";

            typeset TARGET_USER=${OPTARG};

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "TARGET_USER -> ${TARGET_USER}";
            ;;
        a)
            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "OPTARG -> ${OPTARG}";
            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Setting ACTION..";

            typeset ACTION=${OPTARG};

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ACTION -> ${ACTION}";
            ;;
        f)
            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Setting FORCE_PUSH..";

            typeset FORCE_PUSH=${_TRUE};

            [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "FORCE_PUSH -> ${FORCE_PUSH}";
            ;;
        *)
            usage;
            ;;
    esac
done

case "${ACTION}" in
    "installFiles")
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Executing installFiles...";

        installFiles
        ;;
    "deployFiles")
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Executing deployFiles ${TARGET_HOST} ${TARGET_USER}...";

        deployFiles "${TARGET_HOST}" "${TARGET_USER}";
        ;;
    "deployAndInstall")
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Executing deployAndInstall ${TARGET_HOST} ${TARGET_USER}...";

        deployAndInstall "${TARGET_HOST}" "${TARGET_USER}";
        ;;
    *)
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "No arguments/invalid arguments were provided.";

        usage;
        ;;
esac
