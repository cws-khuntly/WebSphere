#!/usr/bin/env bash

#==============================================================================
#          FILE:  installDotFiles
#         USAGE:  See usage section
#   DESCRIPTION:
#
#       OPTIONS:  See usage section
#  REQUIREMENTS:  bash 4+
#          BUGS:  ---
#         NOTES:  
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  CaspersBox Web Services
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#==============================================================================

trap 'terminate \"Caught signal\" 255' INT TERM EXIT;

declare PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin";

## load application logging
# shellcheck source=../etc/logging.properties
if [[ -r "${HOME}/etc/logging.properties" ]] && [[ -s "${HOME}/etc/logging.properties" ]]; then source "${HOME}/etc/logging.properties"; fi
if [[ -r "/usr/local/lib/logger.sh" ]] && [[ -s "/usr/local/lib/logger.sh" ]] && [[ -n "${LOGGING_LOADED}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then source "/usr/local/lib/logger.sh"; fi
if [[ -z "$(command -v "writeLogEntry")" ]]; then printf "\e[00;31m%s\e[00;32m\n" "Failed to load logging configuration. No logging available!" >&2; fi;

if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

## Application constants
CNAME="$(basename "${BASH_SOURCE[0]}")"; declare CNAME;
SCRIPT_ROOT="$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && printf "%s" "${PWD}")")"; declare SCRIPT_ROOT;

declare METHOD_NAME="${CNAME}#startup";
declare CONFIG_FILE_LOCATION="${HOME}/etc/install.conf";

if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "CONFIG_FILE_LOCATION -> ${CONFIG_FILE_LOCATION}" 2>/dev/null; fi

if [[ -r "${CONFIG_FILE_LOCATION}" ]]; then
    declare WORKING_CONFIG_FILE="${CONFIG_FILE_LOCATION}";

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "WORKING_CONFIG_FILE -> ${WORKING_CONFIG_FILE}" 2>/dev/null; fi

    # shellcheck source=../etc/manageFileLifecycle.properties
    source "${WORKING_CONFIG_FILE}";
else
    terminate "Unable to read configuration file ${CONFIG_FILE_LOCATION}. Please ensure the file exists and is readable." 255;
fi

## bring in any library scripts
if [[ -d "${SCRIPT_ROOT}/lib" ]]; then
    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Found library directory ${SCRIPT_ROOT}/lib" 2>/dev/null; fi

    for LIBENTRY in "${SCRIPT_ROOT}"/lib/*.sh; do
        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "LIBENTRY -> ${LIBENTRY}" 2>/dev/null; fi

        if [[ -r "${LIBENTRY}" ]] && [[ -s "${LIBENTRY}" ]]; then source "${LIBENTRY}"; fi
    done
fi

if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "${CNAME} starting up... Process ID ${$}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "${METHOD_NAME} -> enter" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Provided arguments: ${*}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "CNAME -> ${CNAME}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "METHOD_NAME -> ${METHOD_NAME}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "SCRIPT_ROOT -> ${SCRIPT_ROOT}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "CONFIG_FILE_LOCATION -> ${CONFIG_FILE_LOCATION}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "WORKING_CONFIG_FILE -> ${WORKING_CONFIG_FILE}" 2>/dev/null;
fi

#======  FUNCTION  ============================================================
#          NAME:  terminate
#   DESCRIPTION:  Rotates log files in logs directory
#    PARAMETERS:  None
#       RETURNS:  0 regardless of result.
#==============================================================================
function main()
{
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    set +o noclobber;
    function_name="${FUNCNAME[0]}";
    return_code=0;
    error_count=0;
    continue_exec="{_TRUE}";

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        start_epoch=$(printf "%(%s)T");

        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} START: $(date -d "@${start_epoch}" +"${TIMESTAMP_OPTS}")" 2>/dev/null;
    fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> enter" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Provided arguments: ${*}" 2>/dev/null;
    fi

    if [[ -z "${FORCE_PUSH}" ]] || [[ "${FORCE_PUSH}" == "${_FALSE}" ]]; then
        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: validateHostAvailability ${TARGET_HOST}" 2>/dev/null; fi

        [[ -n "${function_name}" ]] && unset -v function_name;
        [[ -n "${ret_code}" ]] && unset -v ret_code;

        validateHostAvailability "${TARGET_HOST}";
        ret_code=${?};

        set +o noclobber;
        function_name="${FUNCNAME[0]}";

        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

        if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
            continue_exec="${_FALSE}";

            (( error_count += 1 ))

            writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Host ${TARGET_HOST} appears to be unavailable." 2>/dev/null;
            writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Host ${TARGET_HOST} appears to be unavailable." 2>/dev/null;
        fi
    fi

    if [[ -n "${continue_exec}" ]] && [[ "${continue_exec}" == "${_TRUE}" ]]; then
        case "${TARGET_ACTION}" in
            [Ii][Nn][Ss][Tt][Aa][Ll][Ff][Ii][Ll][Ee][Ss])
                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: installFiles ${TARGET_HOST}" 2>/dev/null; fi

                [[ -n "${function_name}" ]] && unset -v function_name;
                [[ -n "${ret_code}" ]] && unset -v ret_code;

                installFiles;
                ret_code=${?};

                set +o noclobber;
                function_name="${FUNCNAME[0]}";

                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

                if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                    (( error_count += 1 ))

                    writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute buildPackage. Please review logs." 2>/dev/null;
                    writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute buildPackage. Please review logs." 2>/dev/null;
                else
                    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: copyKeysToTarget ${TARGET_HOST} ${TARGET_USER}" 2>/dev/null; fi

                    [[ -n "${function_name}" ]] && unset -v function_name;
                    [[ -n "${ret_code}" ]] && unset -v ret_code;

                    copyKeysToTarget "${TARGET_HOST}" "${TARGET_USER}";
                    ret_code=${?};

                    set +o noclobber;
                    function_name="${FUNCNAME[0]}";

                    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

                    if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                        (( error_count += 1 ))

                        writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute copyKeysToTarget. Please review logs." 2>/dev/null;
                        writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute copyKeysToTarget. Please review logs." 2>/dev/null
                    fi
                fi
                ;;
            [Dd][Ee][Pp][Ll][Oo][Yy][Ff][Ii][Ll][Ee][Ss])
                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: buildPackage" 2>/dev/null; fi

                [[ -n "${function_name}" ]] && unset -v function_name;
                [[ -n "${ret_code}" ]] && unset -v ret_code;

                buildPackage;
                ret_code=${?};

                set +o noclobber;
                function_name="${FUNCNAME[0]}";

                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

                if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                    (( error_count += 1 ))

                    writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute buildPackage. Please review logs." 2>/dev/null;
                    writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute buildPackage. Please review logs." 2>/dev/null;
                else
                    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: copyKeysToTarget ${TARGET_HOST} ${TARGET_USER}" 2>/dev/null; fi

                    [[ -n "${function_name}" ]] && unset -v function_name;
                    [[ -n "${ret_code}" ]] && unset -v ret_code;

                    copyKeysToTarget "${TARGET_HOST}" "${TARGET_USER}";
                    ret_code=${?};

                    set +o noclobber;
                    function_name="${FUNCNAME[0]}";

                    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

                    if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                        (( error_count += 1 ))

                        writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute copyKeysToTarget. Please review logs." 2>/dev/null;
                        writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute copyKeysToTarget. Please review logs." 2>/dev/null;
                    else
                        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: copyFilesToTarget ${TARGET_HOST} ${TARGET_USER}" 2>/dev/null; fi

                        [[ -n "${function_name}" ]] && unset -v function_name;
                        [[ -n "${ret_code}" ]] && unset -v ret_code;

                        copyFilesToTarget "${TARGET_HOST}" "${TARGET_USER}";
                        ret_code=${?};

                        set +o noclobber;
                        function_name="${FUNCNAME[0]}";

                        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

                        if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                            (( error_count += 1 ))

                            writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute copyFilesToTarget. Please review logs." 2>/dev/null;
                            writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute copyFilesToTarget. Please review logs." 2>/dev/null;
                        fi
                    fi
                fi
                ;;
            [Dd][Ee][Pp][Ll][Oo][Yy][Aa][Nn][Dd][Ii][Nn][Ss][Tt][Aa][Ll])
                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: buildPackage" 2>/dev/null; fi

                [[ -n "${function_name}" ]] && unset -v function_name;
                [[ -n "${ret_code}" ]] && unset -v ret_code;

                buildPackage;
                ret_code=${?};

                set +o noclobber;
                function_name="${FUNCNAME[0]}";

                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

                if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                    (( error_count += 1 ))

                    writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute buildPackage. Please review logs." 2>/dev/null;
                    writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute buildPackage. Please review logs." 2>/dev/null;
                else
                    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: copyKeysToTarget ${TARGET_HOST} ${TARGET_USER}" 2>/dev/null; fi

                    [[ -n "${function_name}" ]] && unset -v function_name;
                    [[ -n "${ret_code}" ]] && unset -v ret_code;

                    copyKeysToTarget "${TARGET_HOST}" "${TARGET_USER}";
                    ret_code=${?};

                    set +o noclobber;
                    function_name="${FUNCNAME[0]}";

                    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

                    if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                        (( error_count += 1 ))

                        writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute copyKeysToTarget. Please review logs." 2>/dev/null;
                        writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute copyKeysToTarget. Please review logs." 2>/dev/null;
                    else
                        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: copyFilesToTarget ${TARGET_HOST} ${TARGET_USER}" 2>/dev/null; fi

                        [[ -n "${function_name}" ]] && unset -v function_name;
                        [[ -n "${ret_code}" ]] && unset -v ret_code;

                        copyFilesToTarget "${TARGET_HOST}" "${TARGET_USER}";
                        ret_code=${?};

                        set +o noclobber;
                        function_name="${FUNCNAME[0]}";

                        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

                        if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                            (( error_count += 1 ))

                            writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute copyFilesToTarget. Please review logs." 2>/dev/null;
                            writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute copyFilesToTarget. Please review logs." 2>/dev/null;
                        else
                            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: copyFilesToTarget ${TARGET_HOST} ${TARGET_USER}" 2>/dev/null; fi

                            [[ -n "${function_name}" ]] && unset -v function_name;
                            [[ -n "${ret_code}" ]] && unset -v ret_code;

                            installFiles;
                            ret_code=${?};

                            set +o noclobber;
                            function_name="${FUNCNAME[0]}";

                            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

                            if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                                (( error_count += 1 ))

                                writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute installFiles. Please review logs." 2>/dev/null;
                                writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute installFiles. Please review logs." 2>/dev/null;
                            else
                                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: copyFilesToTarget ${TARGET_HOST} ${TARGET_USER}" 2>/dev/null; fi

                                [[ -n "${function_name}" ]] && unset -v function_name;
                                [[ -n "${ret_code}" ]] && unset -v ret_code;

                                installFiles;
                                ret_code=${?};

                                set +o noclobber;
                                function_name="${FUNCNAME[0]}";

                                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}" 2>/dev/null; fi

                                if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                                    (( error_count += 1 ))

                                    writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute installFiles. Please review logs." 2>/dev/null;
                                    writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to execute installFiles. Please review logs." 2>/dev/null;
                                fi
                            fi
                        fi
                    fi
                fi
                ;;
            *)
                (( error_count += 1 ));

                writeLogEntry "ERROR" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "An unknown action was provided. TARGET_ACTION -> ${TARGET_ACTION}" 2>/dev/null;
                ;;
        esac

        if [[ -z "${error_count}" ]] || (( error_count == 0 )); then
            writeLogEntry "INFO" "${CNAME}" "${function_name}" "${LINENO}" "${TARGET_ACTION} on host ${TARGET_HOST} as user ${TARGET_USER} has completed successfully." 2>/dev/null;
            writeLogEntry "STDOUT" "${CNAME}" "${function_name}" "${LINENO}" "${TARGET_ACTION} on host ${TARGET_HOST} as user ${TARGET_USER} has completed successfully." 2>/dev/null;
        else
            (( error_count += 1 ));

            writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "An error occurred while processing action ${TARGET_ACTION} on host ${TARGET_HOST} as user ${TARGET_USER}. Please review logs." 2>/dev/null;
            writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "An error occurred while processing action ${TARGET_ACTION} on host ${TARGET_HOST} as user ${TARGET_USER}. Please review logs." 2>/dev/null;
        fi
    else
        if [[ -n "${continue_exec}" ]] && [[ "${continue_exec}" == "${_FALSE}" ]]; then
            (( error_count += 1 ))

            writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Host ${TARGET_HOST} failed availability check and FORCE_PUSH is either unset or ${_FALSE}." 2>/dev/null;
            writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Host ${TARGET_HOST} failed availability check and FORCE_PUSH is either unset or ${_FALSE}." 2>/dev/null;
        fi
    fi

    [[ -n "${ret_code}" ]] && unset -v ret_code;

    if [[ -n "${error_count}" ]] && (( error_count != 0 )); then return_code=${error_count}; fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "return_code -> ${return_code}" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> exit" 2>/dev/null;
    fi

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        end_epoch=$(printf "%(%s)T");
        runtime=$(( start_epoch - end_epoch ));

        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS" 2>/dev/null;
        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} END: $(date -d "@${end_epoch}" +"${TIMESTAMP_OPTS}")" 2>/dev/null;
    fi

    [[ -n "${error_count}" ]] && unset -v error_count;
    [[ -n "${function_name}" ]] && unset -v function_name;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return ${return_code};
}

#======  FUNCTION  ============================================================
#          NAME:  terminate
#   DESCRIPTION:  Rotates log files in logs directory
#    PARAMETERS:  None
#       RETURNS:  0 regardless of result.
#==============================================================================
function terminate()
{
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    set +o noclobber;
    function_name="${CNAME}#${FUNCNAME[0]}";
    return_code=0;

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        start_epoch=$(printf "%(%s)T");

        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} START: $(date -d "@${start_epoch}" +"${TIMESTAMP_OPTS}")" 2>/dev/null;
    fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> enter" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Provided arguments: ${*}" 2>/dev/null;
    fi

    terminate_message="${1}";
    terminate_rc="${2}";

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "terminate_message -> ${terminate_message}" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "terminate_rc -> ${terminate_rc}" 2>/dev/null;
    fi

    if [[ -n "${terminate_message}" ]] && [[ -n "${terminate_rc}" ]] && (( terminate_rc != 0 ))
    then
        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "return_code -> ${return_code}" 2>/dev/null; fi
        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "terminate_message -> ${terminate_message}" 2>/dev/null; fi

        return_code=${terminate_rc};

        writeLogEntry "STDERR" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Abnormal termination encountered. Program will terminate." 2>/dev/null;
        writeLogEntry "STDERR" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "${terminate_message}" 2>/dev/null;
    fi

    [[ -w "${temp_file}" ]] && rm -f "${temp_file}";

    [[ -n "${directory_to_process}" ]] && unset -v DIRECTOR_TO_PROCESS;
    [[ -n "${temp_file}" ]] && unset -v temp_file;
    [[ -n "${entry_type}" ]] && unset -v entry_type;
    [[ -n "${found_entry}" ]] && unset -v found_entry;
    [[ -n "${file_listing[*]}" ]] && unset -v file_listing;

    if [[ -n "${error_count}" ]] && (( error_count != 0 )); then return_code=${error_count} || return_code=0; fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "return_code -> ${return_code}" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> exit" 2>/dev/null;
    fi

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        end_epoch=$(printf "%(%s)T");
        runtime=$(( start_epoch - end_epoch ));

        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS" 2>/dev/null;
        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} END: $(date -d "@${end_epoch}" +"${TIMESTAMP_OPTS}")" 2>/dev/null;
    fi

    [[ -n "${error_count}" ]] && unset -v error_count;
    [[ -n "${function_name}" ]] && unset -v function_name;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return ${return_code};
}

#======  FUNCTION  ============================================================
#          NAME:  terminate
#   DESCRIPTION:  Rotates log files in logs directory
#    PARAMETERS:  None
#       RETURNS:  0 regardless of result.
#==============================================================================
function usage()
{
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    method_name="${CNAME}#${FUNCNAME[0]}";
    return_code=3;

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${method_name}" "${LINENO}" "${method_name} -> enter" 2>/dev/null; fi

    writeLogEntry "STDERR" "${CNAME}" "${method_name}" "${LINENO}" "${CNAME} - Deploy and install dotfiles." 2>/dev/null;
    writeLogEntry "STDERR" "${CNAME}" "${method_name}" "${LINENO}" "Usage: ${CNAME} [ options ]
            -> (--config | -c <configuration file>) - (Optional) The location to an alternative configuration file for this utility. Default configuration file -> ${CONFIG_FILE_LOCATION}
                NOTE: While this is an optional argument, it MUST be the first positional parameter to this application in order to properly load the various configuration options.
            -> --servername | -s <hostname> - The target system name to process against
            -> --username | -u <username> - The username to utilize for the target system
            -> --action | -a <action> - The type of process to execute. One of the following. Default value -> ${DEFAULT_RUNTIME_OPTION}
                -> deployFiles: Pushes dotfiles to the selected system but does not install/apply
                -> installFiles: Installs dotfiles to the selected system - assumes the package has already been sent to the target system
                -> deployAndInstall: Pushes dotfiles to the selected system and installs
                NOTE: These values are NOT case-sensitive.
            -> --test | -t - If passed as an argument, execution against found entries is suspended. Default value -> ${RUN_TEST_ONLY}
            -> --force | f - If passed as an argument, hostname validation is disabled and target hosts will NOT be checked for life. Default value -> ${_FALSE}" 2>/dev/null;

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${method_name}" "${LINENO}" "${method_name} -> exit" 2>/dev/null; fi

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return ${return_code};
}

if (( ${#} == 0 )); then usage; terminate "" ${?}; fi

while (( ${#} > 0 )); do
    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Provided Argument -> ${1}" 2>/dev/null; fi

    ARGUMENT="${1}";
    ARGUMENT_NAME="$(cut -d "=" -f 1 <<< "${ARGUMENT// }" | sed -e "s/--//g" -e "s/-//g")";
    ARGUMENT_VALUE="$(cut -d "=" -f 2 <<< "${ARGUMENT}")";

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "ARGUMENT -> ${ARGUMENT}" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "ARGUMENT_NAME -> ${ARGUMENT_NAME}" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "ARGUMENT_VALUE -> ${ARGUMENT_VALUE}" 2>/dev/null;
    fi

    case "${ARGUMENT_NAME}" in
        config|c)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "ARGUMENT_VALUE -> ${ARGUMENT_VALUE}" 2>/dev/null;
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Setting PROVIDED_CONFIG_FILE..." 2>/dev/null;
            fi

            declare PROVIDED_CONFIG_FILE="${ARGUMENT_VALUE}";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "PROVIDED_CONFIG_FILE -> ${PROVIDED_CONFIG_FILE}" 2>/dev/null; fi

            ## make the selected config active and continue forward
            if [[ -n "${PROVIDED_CONFIG_FILE}" ]] && [[ "${PROVIDED_CONFIG_FILE}" != "${CONFIG_FILE_LOCATION}" ]] && [[ -r "${PROVIDED_CONFIG_FILE}" ]]; then
                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Setting WORKING_CONFIG_FILE..." 2>/dev/null; fi

                declare WORKING_CONFIG_FILE="${PROVIDED_CONFIG_FILE}";

                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "WORKING_CONFIG_FILE -> ${WORKING_CONFIG_FILE}" 2>/dev/null; fi

                source "${WORKING_CONFIG_FILE}";
            fi
            ;;
        servername|s)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "ARGUMENT_VALUE -> ${ARGUMENT_VALUE}" 2>/dev/null;
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Setting TARGET_HOST..." 2>/dev/null;
            fi

            declare TARGET_HOST="${ARGUMENT_VALUE}";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "TARGET_HOST -> ${TARGET_HOST}" 2>/dev/null; fi
            ;;
        username|u)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "ARGUMENT_VALUE -> ${ARGUMENT_VALUE}" 2>/dev/null;
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Setting TARGET_USER..." 2>/dev/null;
            fi

            declare TARGET_USER="${ARGUMENT_VALUE}";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "TARGET_USER -> ${TARGET_USER}" 2>/dev/null; fi
            ;;
        action|a)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "ARGUMENT_VALUE -> ${ARGUMENT_VALUE}" 2>/dev/null;
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Setting TARGET_ACTION..." 2>/dev/null;
            fi

            declare TARGET_ACTION="${ARGUMENT_VALUE}";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "TARGET_ACTION -> ${TARGET_ACTION}" 2>/dev/null; fi
            ;;
        force|f)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "ARGUMENT_VALUE -> ${ARGUMENT_VALUE}" 2>/dev/null;
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Setting FORCE_PUSH..." 2>/dev/null;
            fi

            declare FORCE_PUSH="${_TRUE}";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "FORCE_PUSH -> ${FORCE_PUSH}" 2>/dev/null; fi
            ;;
        test|t)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "ARGUMENT_VALUE -> ${ARGUMENT_VALUE}" 2>/dev/null;
                writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Setting RUN_TEST_ONLY..." 2>/dev/null;
            fi

            declare RUN_TEST_ONLY="${_TRUE}";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "RUN_TEST_ONLY -> ${RUN_TEST_ONLY}" 2>/dev/null; fi
            ;;
        help|\?|h)
            usage;

            if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
            if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

            terminate "" ${?};
            ;;
        *)
            writeLogEntry "ERROR" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "An invalid option has been provided and has been ignored. Option -> ${ARGUMENT_NAME}, Value -> ${ARGUMENT_VALUE}" 2>/dev/null;
            ;;
    esac

    shift;
done

if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "PROVIDED_CONFIG_FILE -> ${PROVIDED_CONFIG_FILE}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "TARGET_HOST -> ${TARGET_HOST}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "TARGET_USER -> ${TARGET_USER}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "TARGET_ACTION -> ${TARGET_ACTION}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "FORCE_PUSH -> ${FORCE_PUSH}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "RUN_TEST_ONLY -> ${RUN_TEST_ONLY}" 2>/dev/null;
fi

if [[ -n "${return_code}" ]] && (( return_code != 0 )) || [[ -n "${RETURN_CODE}" ]] && (( RETURN_CODE != 0 )); then
    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "A non-zero return code has been detected prior to runtime. return_code -> ${return_code}, RETURN_CODE -> ${RETURN_CODE}" 2>/dev/null; fi

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    terminate "Found a non-zero return code prior to execution. Please review logs and parameters." ${RETURN_CODE};
else
    main;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    terminate "" ${RETURN_CODE};
fi
