#!/usr/bin/env bash

#==============================================================================
#
#          FILE:  installDotFiles
#         USAGE:  See usage section
#   DESCRIPTION:
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  CaspersBox Web Services
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#==============================================================================

trap 'terminate \"Caught signal\" 255' INT TERM EXIT;

declare PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin";

if [[ -r "${SCRIPT_ROOT}/etc/logging.properties" ]] && [[ -s "${SCRIPT_ROOT}/etc/logging.properties" ]]; then source "${SCRIPT_ROOT}/etc/logging.properties"; fi
if [[ -r "/usr/local/lib/logger.sh" ]] && [[ -s "/usr/local/lib/logger.sh" ]] && [[ -n "${LOGGING_LOADED}" ]] && [[ "${LOGGING_LOADED}" == "${_TRUE}" ]]; then source "/usr/local/lib/logger.sh"; fi
if [[ -z "$(command -v "writeLogEntry")" ]]; then printf "\e[00;31m%s\e[00;32m\n" "Failed to load logging configuration. No logging available!" >&2; fi;

if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

## source necessary functions
if [[ -r "${HOME}/.dotfiles/functions.d/F06-network" ]]; then source "${HOME}/.dotfiles/functions.d/F06-network"; fi

## Application constants
CNAME="$(basename "${BASH_SOURCE[0]}")"; declare CNAME;
SCRIPT_ROOT="$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && printf "%s" "${PWD}")")"; declare SCRIPT_ROOT;

declare METHOD_NAME="${CNAME}#startup";
declare CONFIG="${HOME}/.dotfiles/etc/install.conf"
declare CURRENT_IFS="${IFS}";
declare MODIFIED_IFS=$'\n';

if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
    writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${CNAME} starting up.. Process ID ${$}";
    writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "${METHOD_NAME} -> enter";
    writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Provided arguments: ${*}";
    writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "CNAME -> ${CNAME}";
    writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "SCRIPT_ROOT -> ${SCRIPT_ROOT}";
    writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "METHOD_NAME -> ${METHOD_NAME}";
    writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "CONFIG -> ${CONFIG}";
    writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "CURRENT_IFS -> ${CURRENT_IFS}";
    writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "MODIFIED_IFS -> ${MODIFIED_IFS}";
fi

#=====  FUNCTION  =============================================================
#          NAME:  deployFiles
#   DESCRIPTION:  ssh's to a target host and removes the existing dotfiles
#                 directory and copies the new one
#    PARAMETERS:  None
#       RETURNS:  0 if success, non-zero otherwise
#==============================================================================
function deployFiles()
{
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    set +o noclobber;
    function_name="${CNAME}#${FUNCNAME[0]}";
    return_code=0;
    error_count=0;

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} START: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;

        start_epoch=$(printf "%(%s)T");
    fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> enter";
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Provided arguments: ${*}";
    fi

    if (( ${#} == 0 )); then
        return_code=3;

        writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "No arguments were provided. Cannot continue.";

        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> exit"; fi

        [[ -n "${target_user}" ]] && unset -v target_user;

        if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
            end_epoch=$(printf "%(%s)T");
            runtime=$(( start_epoch - end_epoch ));

            writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS" 2>/dev/null;
            writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} END: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;
        fi

        [[ -n "${function_name}" ]] && unset -v function_name;

        usage;
    fi

    target_user="${1}";
    target_host="${2}";

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "target_user -> ${target_user}";
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "target_host -> ${target_host}";
    fi

    if [[ "${FORCE_PUSH}" == "${_TRUE}" ]]; then
        writeLogEntry "INFO" "${CNAME}" "${function_name}" "${LINENO}" "Skipping host availability check on host ${target_host} due to FORCE_PUSH being ${_TRUE}";
        writeLogEntry "STDOUT" "${CNAME}" "${function_name}" "${LINENO}" "Skipping host availability check on host ${target_host} due to FORCE_PUSH being ${_TRUE}";
    else
        [[ -n "${function_name}" ]] && unset -v function_name;

        validateHostAvailability "${target_host}";
        ret_code=${?};

        if [[ -n "${function_name}" ]] && [[ "${function_name}" != "${FUNCNAME[0]}" ]]; then function_name="${CNAME}#${FUNCNAME[0]}"; fi

        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}"; fi

        if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
            (( error_count += 1 ))

            writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Host ${TARGET_HOST} appears to be unavailable.";
            writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Host ${TARGET_HOST} appears to be unavailable.";
        fi
    fi

    if [[ -n ${error_count} ]] && (( error_count == 0 )); then
        cd "${HOME}/.dotfiles";

        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: tar --exclude-vcs --exclude=README.md --exclude=LICENSE.md -cvf - "dotfiles" * | ${ARCHIVE_PROGRAM} > \"dotfiles.${ARCHIVE_FILE_EXTENSION}\""; fi

        tar --exclude-vcs --exclude=README.md --exclude=LICENSE.md -cvf - "dotfiles" -- * | ${ARCHIVE_PROGRAM} > "dotfiles.${ARCHIVE_FILE_EXTENSION}";

        if [[ ! -s "dotfiles.${ARCHIVE_FILE_EXTENSION}" ]]; then
            (( error_count += 1 ))

            writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to generatea source archive. Cannot continue.";
            writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to generatea source archive. Cannot continue.";
        else
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Generate temporary file for SFTP batching...";
                writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: mktemp -p \"${TMPDIR-${USABLE_TMP_DIR}}\"";
            fi

            sftp_batch_file="$(mktemp -p "${TMPDIR-${USABLE_TMP_DIR}}")";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "sftp_batch_file -> ${sftp_batch_file}"; fi

            if [[ -z "${sftp_batch_file}" ]] || [[ ! -w "${sftp_batch_file}" ]]; then
                (( error_count += 1 ))

                writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to generate/populate the SFTP batch file ${sftp_batch_file}. Please ensure the file exists and can be written to.";
                writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to generate/populate the SFTP batch file ${sftp_batch_file}. Please ensure the file exists and can be written to.";
            else
                printf "$%s %s\n" "put" "${HOME}/dotfiles.tar" >| "${sftp_batch_file}";

                if [[ ! -s "${sftp_batch_file}" ]]; then
                    (( error_count += 1 ))

                    writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to generate/populate the SFTP batch file ${sftp_batch_file}. Please ensure the file exists and can be written to.";
                    writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to generate/populate the SFTP batch file ${sftp_batch_file}. Please ensure the file exists and can be written to.";
                else
                    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: ssh -ql ${TARGET_USER} ${TARGET_HOST} \"PATH=/bin:/sbin:/usr/bin:/usr/sbin; [[ -f /home/${TARGET_USER}/dotfiles.tar ]] && rm -f /home/${TARGET_USER}/dotfiles.tar;\""; fi

                    ssh -ql "${TARGET_USER}" "${TARGET_HOST}" "PATH=/bin:/sbin:/usr/bin:/usr/sbin; [[ -f /home/${TARGET_USER}/dotfiles.tar ]] && rm -f /home/${TARGET_USER}/dotfiles.tar;";
                    ret_code=${?};

                    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}"; fi

                    if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                        (( error_count += 1 ))

                        writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "An error occurred during the SSH cleanup process. Please review logs.";
                        writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "An error occurred during the SSH cleanup process. Please review logs.";
                    else
                        sftp -b "${sftp_batch_file}" "${TARGET_USER}@${TARGET_HOST}";
                        ret_code=${?};

                        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}"; fi

                        if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                            (( error_count += 1 ))

                            writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "An error occurred during the SSH cleanup process. Please review logs.";
                            writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "An error occurred during the SSH cleanup process. Please review logs.";
                        fi
                    fi
                fi
            fi
        fi
    fi

    [[ -w "${sftp_batch_file}" ]] && rm -f "${sftp_batch_file}";

    [[ -n "${target_user}" ]] && unset -v target_user;
    [[ -n "${target_host}" ]] && unset -v target_host;
    [[ -n "${sftp_batch_file}" ]] && unset -v sftp_batch_file;
    [[ -n "${ret_code}" ]] && unset -v ret_code;

    if [[ -n "${error_count}" ]] && (( error_count != 0 )); then return_code=${error_count} || return_code=0; fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "return_code -> ${return_code}" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> exit" 2>/dev/null;
    fi

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        end_epoch=$(printf "%(%s)T");
        runtime=$(( start_epoch - end_epoch ));

        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS" 2>/dev/null;
        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} END: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;
    fi

    [[ -n "${error_count}" ]] && unset -v error_count;
    [[ -n "${function_name}" ]] && unset -v function_name;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return ${return_code};
}

#=====  FUNCTION  =============================================================
#          NAME:  deployAndInstall
#   DESCRIPTION:  ssh's to a target host and removes the existing dotfiles
#                 directory and copies the new one
#    PARAMETERS:  None
#       RETURNS:  0 if success, non-zero otherwise
#==============================================================================
function deployAndInstall()
{
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    set +o noclobber;
    function_name="${CNAME}#${FUNCNAME[0]}";
    return_code=0;
    error_count=0;

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} START: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;

        start_epoch=$(printf "%(%s)T");
    fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> enter";
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Provided arguments: ${*}";
    fi

    if (( ${#} == 0 )); then
        return_code=3;

        writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "No arguments were provided. Cannot continue.";

        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> exit"; fi

        [[ -n "${target_user}" ]] && unset -v target_user;

        if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
            end_epoch=$(printf "%(%s)T");
            runtime=$(( start_epoch - end_epoch ));

            writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS" 2>/dev/null;
            writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} END: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;
        fi

        [[ -n "${function_name}" ]] && unset -v function_name;

        usage;
    fi

    target_user="${1}";
    target_host="${2}";

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "target_user -> ${target_user}";
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "target_host -> ${target_host}";
    fi

    if [[ "${FORCE_PUSH}" == "${_TRUE}" ]]; then
        writeLogEntry "INFO" "${CNAME}" "${function_name}" "${LINENO}" "Skipping host availability check on host ${target_host} due to FORCE_PUSH being ${FORCE_PUSH}";
        writeLogEntry "STDOUT" "${CNAME}" "${function_name}" "${LINENO}" "Skipping host availability check on host ${target_host} due to FORCE_PUSH being ${FORCE_PUSH}";
    else
        [[ -n "${function_name}" ]] && unset -v function_name;

        validateHostAvailability "${target_host}";
        ret_code=${?};

        if [[ -n "${function_name}" ]] && [[ "${function_name}" != "${CNAME}#${FUNCNAME[0]}" ]]; then function_name="${CNAME}#${FUNCNAME[0]}"; fi

        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}"; fi

        if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
            (( error_count += 1 ))

            writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Host ${target_host} appears to be unavailable.";
            writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Host ${target_host} appears to be unavailable.";
        fi
    fi

    if (( error_count == 0 )); then
        ## copy ssh keys
        for keyfile in id_rsa id_dsa id_ecdsa ## handle all, not just rsa
        do
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "keyfile -> ${keyfile}";
                writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Copying public key ${keyfile}";
            fi

            ## check if the file actually exists, if its not there just skip it
            if [[ ! -r /home/${target_user}/.ssh/${keyfile}.pub ]]; then continue; fi

            ssh-copy-id -i "/home/${target_user}/.ssh/${keyfile}.pub" -f "${target_host}" > "/home/${target_user}/.log/ssh-copy-id-${keyfile}" 2>&1;
            ret_code=${?};

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}"; fi

            if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                (( error_count += 1 ));

                writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to copy SSH identity ${keyfile} to host ${target_host}";
                writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to copy SSH identity ${keyfile} to host ${target_host}";
            fi

            [[ -n "${ret_code}" ]] && unset -v ret_code;
            [[ -n "${keyfile}" ]] && unset -v keyfile;
        done

        deployFiles;
        ret_code=${?};

        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}"; fi

        if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
            (( error_count += 1 ));

            writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to copy SSH identity ${keyfile} to host ${target_host}";
            writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to copy SSH identity ${keyfile} to host ${target_host}";
        else
            ## ok, files should be out there. lets go
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "EXEC: ssh -ql ${target_user} ${target_host} \"PATH=${PATH}:/bin:sbin:/usr/bin:/usr/sbin; [[ -d /home/${target_user}/.dotfiles ]] && \
                    rm -rf /home/${target_user}/.dotfiles; mkdir /home/${target_user}/.dotfiles >/dev/null 2>&1; \
                    cd /home/${target_user}/.dotfiles; tar xf /home/${target_user}/dotfiles.tar; \
                    /home/${target_user}/.dotfiles/bin/installDotFiles -a installFiles;\""; fi

            ssh -ql "${target_user}" "${target_host}" "PATH=${PATH}:/bin:sbin:/usr/bin:/usr/sbin; [[ -d /home/${target_user}/.dotfiles ]] && \
                rm -rf /home/${target_user}/.dotfiles; mkdir /home/${target_user}/.dotfiles > /dev/null 2>&1; \
                cd /home/${target_user}/.dotfiles; tar xf /home/${target_user}/dotfiles.tar; \
                /home/${target_user}/.dotfiles/bin/installDotFiles -a installFiles;";
            ret_code=${?};

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "ret_code -> ${ret_code}"; fi

            if [[ -z "${ret_code}" ]] || (( ret_code != 0 )); then
                (( error_count += 1 ));

                writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to copy SSH identity ${keyfile} to host ${target_host}";
                writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to copy SSH identity ${keyfile} to host ${target_host}";
            fi
        fi
    fi

    [[ -n "${target_user}" ]] && unset -v target_user;
    [[ -n "${target_host}" ]] && unset -v target_host;
    [[ -n "${ret_code}" ]] && unset -v ret_code;

    if [[ -n "${error_count}" ]] && (( error_count != 0 )); then return_code=${error_count} || return_code=0; fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "return_code -> ${return_code}" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> exit" 2>/dev/null;
    fi

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        end_epoch=$(printf "%(%s)T");
        runtime=$(( start_epoch - end_epoch ));

        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS" 2>/dev/null;
        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} END: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;
    fi

    [[ -n "${error_count}" ]] && unset -v error_count;
    [[ -n "${function_name}" ]] && unset -v function_name;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return ${return_code};
}

#=====  FUNCTION  =============================================================
#          NAME:  installFiles
#   DESCRIPTION:  Re-loads existing dotfiles for use
#    PARAMETERS:  None
#       RETURNS:  0 if success, non-zero otherwise
#==============================================================================
function installFiles()
{
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    set +o noclobber;
    function_name="${CNAME}#${FUNCNAME[0]}";
    return_code=0;
    error_count=0;

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} START: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;

        start_epoch=$(printf "%(%s)T");
    fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> enter";
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Provided arguments: ${*}";
    fi

    if (( ${#} == 0 )); then
        return_code=3;

        writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "No arguments were provided. Cannot continue.";

        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> exit"; fi

        [[ -n "${target_user}" ]] && unset -v target_user;

        if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
            end_epoch=$(printf "%(%s)T");
            runtime=$(( start_epoch - end_epoch ));

            writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS" 2>/dev/null;
            writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} END: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;
        fi

        [[ -n "${function_name}" ]] && unset -v function_name;

        usage;
    fi

    ## change some permissions
    [[ ! -d "${HOME}/.ssh" ]] && mkdir -pv "${HOME}/.ssh";
    [[ ! -d "${HOME}/.gnupg" ]] && mkdir -pv "${HOME}/.gnupg";

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: find ${HOME}/.dotfiles -type d -exec chmod 755 {} \;";
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: find ${HOME}/.dotfiles -type f -exec chmod 644 {} \;";
    fi

    find "${HOME}/.dotfiles" -type d -exec chmod 755 {} \; ;
    find "${HOME}/.dotfiles" -type f -exec chmod 644 {} \; ;

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: chmod 755 ${HOME}/.dotfiles/bin/*";
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: chmod 700 ${HOME}/.ssh ${HOME}/.gnupg";
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "EXEC: chmod 600 ${HOME}/.dotfiles/m2/settings.xml ${HOME}/.dotfiles/etc/ldaprc ${HOME}/.dotfiles/etc/curlrc ${HOME}/.dotfiles/etc/netrc ${HOME}/.dotfiles/etc/wgetrc \
            ${HOME}/.dotfiles/etc/SecurityService/config/ServiceConfig.xml ${HOME}/.dotfiles/etc/eSolutionsCore/config/ServiceConfig.xml";
    fi

    chmod 755 "${HOME}/.dotfiles/bin/*"; ## 755 on all files in bin
    chmod 700 "${HOME}/.ssh" "${HOME}/.gnupg"; ## ssh/gpg wants 700
    chmod 600 "${HOME}/.dotfiles/m2/settings.xml" "${HOME}/.dotfiles/etc/ldaprc" "${HOME}/.dotfiles/etc/curlrc" "${HOME}/.dotfiles/etc/netrc" "${HOME}/.dotfiles/etc/wgetrc" \
        "${HOME}/.dotfiles/etc/SecurityService/config/ServiceConfig.xml" "${HOME}/.dotfiles/etc/eSolutionsCore/config/ServiceConfig.xml"; ## 600 on all security related files

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Generating and creating files."; fi

    ## change the IFS
    IFS="${MODIFIED_IFS}";

    ## clean up home directory first
    for entry in $(< "${CONFIG}")
    do
        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "entry -> ${entry}"; fi

        [[ "${entry}" =~ ^\# ]] && continue;

        entry_command="$(cut -d "|" -f 1 <<< "${entry}")";
        entry_source="$(cut -d "|" -f 2 <<< "${entry}")";
        entry_target="$(cut -d "|" -f 3 <<< "${entry}")";

        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
            writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "entry_command -> ${entry_command}";
            writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "entry_source -> ${entry_source}";
            writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "entry_target -> ${entry_target}";
        fi

        case "${entry_command}" in
            "mkdir")
                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                    writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "entry_command -> ${entry_command}";
                    writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Creating directory ${entry_source}";
                fi

                mkdir -pv "${entry_source}";
                ret_code=${?};

                if [[ -z "${ret_code}" ]] || (( ret_code != 0 ))
                then
                    (( error_count +_= 0 ));

                    writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to create directory ${entry_source} on host ${HOSTNAME}";
                    writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to create directory ${entry_source} on host ${HOSTNAME}";

                    continue;
                fi

                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Directory ${entry_source} created"; fi
                ;;
            "ln")
                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                    writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "entry_command -> ${entry_command}";
                    writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Removing symbolic link ${entry_target}";
                fi

                [[ -L "${entry_target}" ]] && unlink "${entry_target}";
                [[ -f "${entry_target}" ]] && rm -f "${entry_target}";

                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Creating symbolic link ${entry_source} -> ${entry_target}"; fi

                ln -s "${entry_source}" "${entry_target}";
                ret_code=${?};

                if [[ -z "${ret_code}" ]] || (( ret_code != 0 ))
                then
                    (( error_count +_= 0 ));

                    writeLogEntry "ERROR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to create symbolic link ${entry_target} with source ${entry_source} on host ${HOSTNAME}";
                    writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Failed to create symbolic link ${entry_target} with source ${entry_source} on host ${HOSTNAME}";

                    continue;
                fi

                if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Symbolic link ${entry_source} -> ${entry_target} created."; fi
                ;;
            *)
                writeLogEntry "INFO" "${CNAME}" "${function_name}" "${LINENO}" "Skipping entry ${entry_command}.";

                continue;
                ;;
        esac

        [[ -n "${ret_code}" ]] && unset -v ret_code;
        [[ -n "${entry_command}" ]] && unset -v entry_command;
        [[ -n "${entry_source}" ]] && unset -v entry_source;
        [[ -n "${entry_target}" ]] && unset -v entry_target;
        [[ -n "${entry}" ]] && unset -v entry;
    done

    ## restore the original ifs
    IFS="${CURRENT_IFS}";

    if [[ -n "${error_count}" ]] && (( error_count != 0 )); then return_code=${error_count} || return_code=0; fi

    [[ -w "${HOME}/dotfiles.tar" ]] && rm -f "${HOME}/dotfiles.tar";

    [[ -n "${ret_code}" ]] && unset -v ret_code;
    [[ -n "${entry_command}" ]] && unset -v entry_command;
    [[ -n "${entry_source}" ]] && unset -v entry_source;
    [[ -n "${entry_target}" ]] && unset -v entry_target;
    [[ -n "${entry}" ]] && unset -v entry;

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "return_code -> ${return_code}" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> exit" 2>/dev/null;
    fi

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        end_epoch=$(printf "%(%s)T");
        runtime=$(( start_epoch - end_epoch ));

        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS" 2>/dev/null;
        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} END: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;
    fi

    [[ -n "${error_count}" ]] && unset -v error_count;
    [[ -n "${function_name}" ]] && unset -v function_name;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return ${return_code};
}

#======  FUNCTION  ============================================================
#          NAME:  terminate
#   DESCRIPTION:  Rotates log files in logs directory
#    PARAMETERS:  None
#       RETURNS:  0 regardless of result.
#==============================================================================
function terminate()
{
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    set +o noclobber;
    function_name="${CNAME}#${FUNCNAME[0]}";
    return_code=0;

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} START: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;

        start_epoch=$(printf "%(%s)T");
    fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> enter" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "Provided arguments: ${*}" 2>/dev/null;
    fi

    terminate_message="${1}";
    terminate_rc="${2}";

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "terminate_message -> ${terminate_message}" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "terminate_rc -> ${terminate_rc}" 2>/dev/null;
    fi

    if [[ -n "${terminate_message}" ]] && [[ -n "${terminate_rc}" ]] && (( terminate_rc != 0 ))
    then
        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "return_code -> ${return_code}" 2>/dev/null; fi
        if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "terminate_message -> ${terminate_message}" 2>/dev/null; fi

        return_code=${terminate_rc};

        writeLogEntry "STDERR" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Abnormal termination encountered. Program will terminate." 2>/dev/null;
        writeLogEntry "STDERR" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "${terminate_message}" 2>/dev/null;
    fi

    [[ -w "${temp_file}" ]] && rm -f "${temp_file}";

    [[ -n "${directory_to_process}" ]] && unset -v DIRECTOR_TO_PROCESS;
    [[ -n "${temp_file}" ]] && unset -v temp_file;
    [[ -n "${entry_type}" ]] && unset -v entry_type;
    [[ -n "${found_entry}" ]] && unset -v found_entry;
    [[ -n "${file_listing[*]}" ]] && unset -v file_listing;

    if [[ -n "${error_count}" ]] && (( error_count != 0 )); then return_code=${error_count} || return_code=0; fi

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "return_code -> ${return_code}" 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} -> exit" 2>/dev/null;
    fi

    if [[ -n "${ENABLE_PERFORMANCE}" ]] && [[ "${ENABLE_PERFORMANCE}" == "${_TRUE}" ]]; then
        end_epoch=$(printf "%(%s)T");
        runtime=$(( start_epoch - end_epoch ));

        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} TOTAL RUNTIME: $(( runtime / 60)) MINUTES, TOTAL ELAPSED: $(( runtime % 60)) SECONDS" 2>/dev/null;
        writeLogEntry "PERFORMANCE" "${CNAME}" "${function_name}" "${LINENO}" "${function_name} END: $(printf "%($(printf "%s" "${TIMESTAMP_OPTS}"))T %s")" 2>/dev/null;
    fi

    [[ -n "${error_count}" ]] && unset -v error_count;
    [[ -n "${function_name}" ]] && unset -v function_name;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return ${return_code};
}

function usage()
{
    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set -x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set -v; fi

    method_name="${CNAME}#${FUNCNAME[0]}";
    return_code=3;

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${method_name}" "${LINENO}" "${method_name} -> enter" 2>/dev/null; fi

    writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "${CNAME} - Install dotfiles to a remote host";
    writeLogEntry "STDERR" "${CNAME}" "${function_name}" "${LINENO}" "Usage: ${CNAME} [ -h host ] [ -u user ] [ -a action ] (-f)
            -> -h <host> - The hostname to connect to
            -> -u <user> - The username to connect as
            -> -a <action> - The action to perform
                -> One of the following:
                    -> installFiles - To install the files on the local system
                    -> deployFiles - To deploy the files to the target host but NOT install
                    -> deployAndInstall - Deploy and install the dotfiles on the target host
            -> (-f) - Force deployment (skip host verification)";

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${CNAME}" "${method_name}" "${LINENO}" "${method_name} -> exit" 2>/dev/null; fi

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    return ${return_code};
}

(( ${#} == 0 )) && usage;

while getopts h:u:a:f OPTIONS
do
    case "${OPTIONS}" in
        h)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "OPTARG -> ${OPTARG}";
                writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Setting TARGET_HOST..";
            fi

            declare TARGET_HOST="${OPTARG}";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "TARGET_HOST -> ${TARGET_HOST}"; fi
            ;;
        u)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "OPTARG -> ${OPTARG}";
                writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Setting TARGET_USER..";
            fi

            declare TARGET_USER="${OPTARG}";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "TARGET_USER -> ${TARGET_USER}"; fi
            ;;
        a)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
                writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "OPTARG -> ${OPTARG}";
                writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Setting ACTION..";
            fi

            declare ACTION="${OPTARG}";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "ACTION -> ${ACTION}"; fi
            ;;
        f)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Setting FORCE_PUSH.."; fi

            declare FORCE_PUSH="${_TRUE}";

            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "FORCE_PUSH -> ${FORCE_PUSH}"; fi
            ;;
        *)
            usage;
            ;;
    esac
done

if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "TARGET_HOST -> ${TARGET_HOST}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "TARGET_USER -> ${TARGET_USER}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "ACTION -> ${ACTION}" 2>/dev/null;
    writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "FORCE_PUSH -> ${FORCE_PUSH}" 2>/dev/null;
fi

if [[ -n "${return_code}" ]] && (( return_code != 0 )) || [[ -n "${RETURN_CODE}" ]] && (( RETURN_CODE != 0 )); then
    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then
        writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "return_code -> ${return_code}, " 2>/dev/null;
        writeLogEntry "DEBUG" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}" 2>/dev/null;
    fi

    writeLogEntry "STDERR" "${CNAME}" "${METHOD_NAME}" "${LINENO}" "Encountered an existing return code. Execution halted." 2>/dev/null;

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    terminate "Found a non-zero return code prior to execution. Please review logs and parameters." 1;
else
    case "${ACTION}" in
        "installFiles")
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Executing installFiles..."; fi

            installFiles
            ;;
        "deployFiles")
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Executing deployFiles ${TARGET_HOST} ${TARGET_USER}..."; fi

            deployFiles "${TARGET_HOST}" "${TARGET_USER}";
            ;;
        "deployAndInstall")
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "Executing deployAndInstall ${TARGET_HOST} ${TARGET_USER}..."; fi

            deployAndInstall "${TARGET_HOST}" "${TARGET_USER}";
            ;;
        *)
            if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "No arguments/invalid arguments were provided."; fi

            usage;
            ;;
    esac

    RETURN_CODE=${?};

    if [[ -n "${ENABLE_DEBUG}" ]] && [[ "${ENABLE_DEBUG}" == "${_TRUE}" ]]; then writeLogEntry "DEBUG" "${METHOD_NAME}" "${CNAME}" "${LINENO}" "RETURN_CODE -> ${RETURN_CODE}"; fi

    if [[ -n "${ENABLE_VERBOSE}" ]] && [[ "${ENABLE_VERBOSE}" == "${_TRUE}" ]]; then set +x; fi
    if [[ -n "${ENABLE_TRACE}" ]] && [[ "${ENABLE_TRACE}" == "${_TRUE}" ]]; then set +v; fi

    terminate "" ${RETURN_CODE};
fi
